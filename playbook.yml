# Directory structure:
# ansible/
# ├── playbook.yml
# ├── inventory.yml
# ├── group_vars/
# │   └── all.yml
# ├── templates/
# │   ├── caddy/
# │   │   └── Caddyfile.j2
# │   └── paperless/
# │       ├── docker-compose.yml.j2
# │       └── .env.j2
# └── files/
#     └── (any static files if needed)

---
# ansible/playbook.yml
- name: Deploy multi-user paperless-ngx setup
  hosts: all
  become: true
  vars:
    caddy_config_dir: /etc/caddy
    caddy_data_dir: /var/lib/caddy

  tasks:
    - name: Update system packages
      apt:
        update_cache: true
        upgrade: dist

    - name: Install required packages
      apt:
        name:
          - jq
          - ufw
          - python3-pip
        state: present

    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Create user accounts
      user:
        name: "{{ item.name }}"
        shell: /bin/bash
        create_home: true
        groups: docker
        append: true
      loop: "{{ users }}"

    - name: Create service directories for each user
      file:
        path: "/home/{{ item.name }}/{{ service_name }}"
        state: directory
        owner: "{{ item.name }}"
        group: "{{ item.name }}"
        mode: '0755'
      loop: "{{ users }}"
      vars:
        service_name: paperless

    - name: Create data directories for each user
      file:
        path: "/home/{{ item.name }}/{{ service_name }}/data"
        state: directory
        owner: "{{ item.name }}"
        group: "{{ item.name }}"
        mode: '0755'
      loop: "{{ users }}"
      vars:
        service_name: paperless

    - name: Generate docker-compose.yml for each user
      template:
        src: "{{ service_name }}/docker-compose.yml.j2"
        dest: "/home/{{ item.name }}/{{ service_name }}/docker-compose.yml"
        owner: "{{ item.name }}"
        group: "{{ item.name }}"
        mode: '0644'
      loop: "{{ users }}"
      vars:
        service_name: paperless
        user: "{{ item }}"

    - name: Generate .env file for each user
      template:
        src: "{{ service_name }}/.env.j2"
        dest: "/home/{{ item.name }}/{{ service_name }}/.env"
        owner: "{{ item.name }}"
        group: "{{ item.name }}"
        mode: '0600'
      loop: "{{ users }}"
      vars:
        service_name: paperless
        user: "{{ item }}"

    - name: Install Caddy
      get_url:
        url: https://github.com/caddyserver/caddy/releases/download/v2.10.0/caddy_2.10.0_linux_amd64.tar.gz
        dest: /tmp/caddy.tar.gz

    - name: Extract Caddy
      unarchive:
        src: /tmp/caddy.tar.gz
        dest: /usr/local/bin
        remote_src: yes
        creates: /usr/local/bin/caddy
        mode: '0755'

    - name: Create Caddy directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ caddy_config_dir }}"
        - "{{ caddy_data_dir }}"

    - name: Generate main Caddyfile
      template:
        src: caddy/Caddyfile.j2
        dest: "{{ caddy_config_dir }}/Caddyfile"
        mode: '0644'
      notify: restart caddy

    - name: Create Caddy systemd service
      copy:
        content: |
          [Unit]
          Description=Caddy
          Documentation=https://caddyserver.com/docs/
          After=network.target network-online.target
          Requires=network-online.target

          [Service]
          Type=notify
          User=caddy
          Group=caddy
          ExecStart=/usr/local/bin/caddy run --environ --config {{ caddy_config_dir }}/Caddyfile
          ExecReload=/usr/local/bin/caddy reload --config {{ caddy_config_dir }}/Caddyfile --force
          TimeoutStopSec=5s
          LimitNOFILE=1048576
          LimitNPROC=1048576
          PrivateTmp=true
          ProtectSystem=full
          AmbientCapabilities=CAP_NET_BIND_SERVICE

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/caddy.service
        mode: '0644'
      notify: 
        - reload systemd
        - restart caddy

    - name: Create caddy user
      user:
        name: caddy
        system: true
        shell: /usr/sbin/nologin
        home: /var/lib/caddy
        create_home: no

    - name: Set Caddy data directory ownership
      file:
        path: "{{ caddy_data_dir }}"
        owner: caddy
        group: caddy
        recurse: true

    - name: Set Caddy log directory ownership
      file:
        path: "/var/log/caddy"
        owner: caddy
        group: caddy
        recurse: true

    - name: Configure UFW firewall
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - '22'     # SSH
        - '80'     # HTTP
        - '443'    # HTTPS

    - name: Enable UFW
      ufw:
        state: enabled

    - name: Start user services
      community.docker.docker_compose_v2:
        project_src: "/home/{{ item.name }}/paperless"
        state: present
      become_user: "{{ item.name }}"
      loop: "{{ users }}"

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart caddy
      systemd:
        name: caddy
        state: restarted
        enabled: yes